package examples

import (
	"fmt"
	"time"

	"gopkg.in/tomb.v2"
)

// пакет tomp (на данный момент не является стабильным) позволяет отслеживать
// жива горутина, умирает или мертва. Также помогает обмениваться между горутинами
// причинами смерти.
func RunEx6() {
	// создадим основу для демострации
	p := Printer{
		Ch: make(chan string),
	}

	// запускаем два бесконечных цикла
	go p.loop()
	go p.print()

	// по истечению времени мы вызываем метод stop, который отправляет сигнал
	// в loop для завершения горутины.
	<-time.After(2 * time.Second)
	p.stop()
}

// структура для дальнейших действий
type Printer struct {
	Ch chan string
	t  tomb.Tomb
}

// тут мы даем сигнал, чтобы остановить loop
// обычно данный метод (Kill) используется в блоке обработки ошибок, и в него
// передается ошибка, чтобы потом, например, это ошибку куда-нибудь записать
func (p *Printer) stop() {
	p.t.Kill(nil)
}

// отправляем в основной канал данные до тех пор, пока из канала Dying не будет сигнала
// так мы можем обработать ошибку чисто, но в данном случае нам достаточно закрыть канал
func (p *Printer) loop() {
	for {
		select {
		case p.Ch <- string("..."):
		case <-p.t.Dying():
			close(p.Ch)
			return
		}
	}
}

// тут просто печатаем, пока канал открыт
func (p *Printer) print() {
	for s := range p.Ch {
		fmt.Println(s)
	}
}
